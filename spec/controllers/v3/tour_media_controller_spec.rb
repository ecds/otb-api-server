require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe V3::TourMediaController, type: :controller do

  describe 'GET #index' do
    before(:each) { Tour.all.each { |tour| tour.update(published: false) } }

    context 'unauthenticated' do
      it 'returns a success response but zeor TourMedium objects' do

        tour_medium = create(:tour_medium, tour: create(:tour, published: false))
        get :index, params: { tenant: Apartment::Tenant.current }
        expect(response.status).to eq(200)
        expect(json.count).to eq(0)
        expect(TourMedium.count).to be > 0
      end

      it 'returns a success response but zeor TourMedium objects' do
        tour_medium = create(:tour_medium, tour: create(:tour, published: true))
        get :index, params: { tenant: Apartment::Tenant.current }
        expect(response.status).to eq(200)
        expect(json.count).to eq(1)
      end
    end

    context 'authenticated unauthorized' do

      it 'returns zero TourMedium objects, not current tenant admin, non tour author' do
        original_tenant = Apartment::Tenant.current
        tour_medium = create(:tour_medium, tour: create(:tour, published: false))
        tour_set = create(:tour_set)
        user = create(:user, super: false)
        user.tour_sets << tour_set
        signed_cookie(user)
        get :index, params: { tenant: original_tenant }
        Apartment::Tenant.switch! original_tenant
        expect(response.status).to eq(200)
        expect(json.count).to eq(0)
        expect(TourMedium.count).to be > 0
      end

      it 'returns zero TourMedium objects, not current tenant admin, non tour author' do
        original_tenant = Apartment::Tenant.current
        tour_medium = create(:tour_medium, tour: create(:tour, published: false))
        tour_set = create(:tour_set)
        Apartment::Tenant.switch! tour_set.subdir
        user = create(:user, super: false)
        user.tours << create(:tour)
        signed_cookie(user)
        Apartment::Tenant.switch! original_tenant
        get :index, params: { tenant: original_tenant }
        expect(response.status).to eq(200)
        expect(json.count).to eq(0)
        expect(TourMedium.count).to be > 0
      end
    end

    context 'authenticated and authorized' do
      it 'returns all TourMedium objects to super' do
        create_list(:tour_medium, 4)
        user = create(:user, super: true)
        signed_cookie(user)
        get :index, params: { tenant: Apartment::Tenant.current }
        expect(response.status).to eq(200)
        expect(json.count).to eq(TourMedium.count)
      end

      it 'returns all TourMedium objects to tenant admin' do
        create_list(:tour_medium, 4)
        user = create(:user, super: false)
        user.tour_sets << TourSet.find_by(subdir: Apartment::Tenant.current)
        signed_cookie(user)
        get :index, params: { tenant: Apartment::Tenant.current }
        expect(response.status).to eq(200)
        expect(json.count).to eq(TourMedium.count)
      end
    end
  end

  describe 'GET #show' do
    context 'unauthenticated' do
      it 'returns a success response but empty TourMedium objects' do

        tour_medium = create(:tour_medium, tour: create(:tour, published: false))
        get :show, params: { id: tour_medium.id, tenant: Apartment::Tenant.current }
        expect(response.status).to eq(200)
        expect(relationships[:medium][:data]).to be nil
        expect(relationships[:tour][:data]).to be nil
        expect(tour_medium.tour).not_to be nil
        expect(tour_medium.medium).not_to be nil
        expect(TourMedium.count).to be > 0
      end

      # it 'returns a success response but empty TourMedium objects' do
      #   tour_medium = create(:tour_medium, tour: create(:tour, published: true))
      #   get :index, params: { id: tour_medium.id, tenant: Apartment::Tenant.current }
      #   expect(response.status).to eq(200)
      #   expect(json.count).to eq(1)
      # end
    end

    context 'authenticated unauthorized' do

      it 'returns empty TourMedium objects, not current tenant admin, non tour author' do
        original_tenant = Apartment::Tenant.current
        tour_medium = create(:tour_medium, tour: create(:tour, published: false))
        tour_set = create(:tour_set)
        user = create(:user, super: false)
        user.tour_sets << tour_set
        signed_cookie(user)
        Apartment::Tenant.switch! original_tenant
        get :show, params: { id: tour_medium.id, tenant: original_tenant }
        expect(response.status).to eq(200)
        expect(relationships[:medium][:data]).to be nil
        expect(relationships[:tour][:data]).to be nil
        expect(tour_medium.tour).not_to be nil
        expect(tour_medium.medium).not_to be nil
        expect(TourMedium.count).to be > 0
      end

      it 'returns empty TourMedium objects, not current tenant admin, non tour author' do
        original_tenant = Apartment::Tenant.current
        tour_medium = create(:tour_medium, tour: create(:tour, published: false))
        tour_set = create(:tour_set)
        Apartment::Tenant.switch! tour_set.subdir
        user = create(:user, super: false)
        user.tours << create(:tour)
        signed_cookie(user)
        Apartment::Tenant.switch! original_tenant
        get :show, params: { id: tour_medium.id, tenant: original_tenant }
        expect(response.status).to eq(200)
        expect(relationships[:medium][:data]).to be nil
        expect(relationships[:tour][:data]).to be nil
        expect(TourMedium.count).to be > 0
      end
    end

    context 'authenticated and authorized' do
      it 'returns all TourMedium objects to super' do
        create_list(:tour_medium, 4)
        user = create(:user, super: true)
        signed_cookie(user)
        get :show, params: { id: TourMedium.last.id, tenant: Apartment::Tenant.current }
        expect(response.status).to eq(200)
        expect(json.count).to eq(TourMedium.count)
      end
    end
  end

  describe 'POST #create' do
    it 'returns does not create a new TourMedium' do
      expect {
        post :create, params: { tenant: Apartment::Tenant.current }
      }.to change(TourMedium, :count).by(0)
    end

    it 'returns 401' do
      user = create(:user, super: true)
      signed_cookie(user)
      post :create, params: { data: { type: 'tour_media', attributes: { tour_id: 1, medium_id: 1, position: 1 } }, tenant: Apartment::Tenant.current }
      expect(response.status).to eq(401)
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
  #     let(:new_attributes) {
  #       skip('Add a hash of attributes valid for your model')
  #     }

  #     it 'updates the requested v3_tour_medium' do
  #       tour_medium = TourMedium.create! valid_attributes
  #       put :update, params: {id: tour_medium.to_param, v3_tour_medium: new_attributes}, session: valid_session
  #       tour_medium.reload
  #       skip('Add assertions for updated state')
  #     end

      it 'renders a JSON response with the v3_tour_medium' do
        tour_medium = create(:tour_medium, position: 1)
        expect(tour_medium.position).not_to eq(100)
        user = create(:user, super: true)
        signed_cookie(user)
        put :update, params: { id: tour_medium.id, data: { type: 'tour_media', attributes: { tour_id: tour_medium.tour.id, medium_id: tour_medium.medium.id, position: 100 } }, tenant: Apartment::Tenant.current }
        expect(response).to have_http_status(:ok)
        expect(attributes[:position]).to eq(100)
        expect(TourMedium.find(tour_medium.id).position).to eq(100)
      end
    end

  #   context 'with invalid params' do
  #     it 'renders a JSON response with errors for the v3_tour_medium' do
  #       tour_medium = TourMedium.create! valid_attributes

  #       put :update, params: {id: tour_medium.to_param, v3_tour_medium: invalid_attributes}, session: valid_session
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  end

  describe 'DELETE #destroy' do
    it 'does not destroy the requested v3_tour_medium' do
      tour_medium = create(:tour_medium)
      user = create(:user, super: true)
      signed_cookie(user)
      expect {
        delete :destroy, params: { id: tour_medium.to_param, tenant: Apartment::Tenant.current }
      }.to change(TourMedium, :count).by(0)
    end

    it 'responds with 405' do
      tour_medium = create(:tour_medium)
      user = create(:user, super: true)
      signed_cookie(user)
      delete :destroy, params: { id: tour_medium.to_param, tenant: Apartment::Tenant.current }
      expect(response.status).to eq(405)
    end
  end
end
